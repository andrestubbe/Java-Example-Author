package examples.java.awt.image;

import java.nio.ByteBuffer;
import java.util.Random;

public class DataBuffer_getOffset_Example {

    /**
     * This example demonstrates the usage of getOffset() method in DataBuffer class. 
     * The goal of this example is to show how getOffset() can be used to retrieve a specific offset within a ByteBuffer contained within a DataBuffer. 
     * In this particular example, we will create a sample data set consisting of 10 random integers between 1 and 100. 
     * We will then use the put() method provided by the ByteBuffer class to store these random integers into a new instance of the ByteBuffer class. 
     * Finally, we will wrap our newly created ByteBuffer instance within a DataBuffer instance using the getOffset() method. This approach enables us to retrieve any specific offset within the data stored in our DataBuffer instance.
     */

    public static void main(String[] args) {

        // Create an instance of Random class to generate random integers
        Random rand = new Random();

        // Define a constant for the size of our sample data set
        final int SAMPLE_DATA_SET_SIZE = 10;

        // Allocate memory for our sample data set using ByteBuffer.allocate() method
        ByteBuffer byteBuffer = ByteBuffer.allocate(SAMPLE_DATA_SET_SIZE * Integer.BYTES)); // Integer.BYTES is used to represent the size of an integer in bytes

        // Put random integers generated by our Random class into our ByteBuffer instance using put() method
        for (int i = 0; i < SAMPLE_DATA_SET_SIZE; i++) {
            byteBuffer.put((byte) (rand.nextInt(100) + 1)))); // We add 1 to the random number generated by nextInt(100) so that our random integer range becomes 1 - 100 instead of 0 - 99.
        }

        // Create an instance of DataBuffer class and wrap our ByteBuffer instance in it using getOffset() method
        DataBuffer dataBuffer = new DataBuffer(byteBuffer, SAMPLE_DATA_SET_SIZE * Integer.BYTES)); // We pass the size of our sample data set as the second argument to the DataBuffer constructor.

        // Print the results
        System.out.println("Sample Data Set:");
        for (int i = 0; i < SAMPLE_DATA_SET_SIZE; i++) {
            int offset = (i * Integer.BYTES) + byteBuffer.position(); // We calculate the current offset within our data set using the getOffset() method and multiplying it by the size of an integer in bytes and adding it to the position() value of our ByteBuffer instance.
            System.out.printf("%4d ", offset)); // We print each offset value with a leading space for better readability.
        }

    }

}